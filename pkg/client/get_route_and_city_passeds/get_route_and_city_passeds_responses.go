// Code generated by go-swagger; DO NOT EDIT.

package get_route_and_city_passeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"kurirmoo/gen/models"
)

// GetRouteAndCityPassedsReader is a Reader for the GetRouteAndCityPasseds structure.
type GetRouteAndCityPassedsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRouteAndCityPassedsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRouteAndCityPassedsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRouteAndCityPassedsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRouteAndCityPassedsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRouteAndCityPassedsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetRouteAndCityPassedsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetRouteAndCityPassedsOK creates a GetRouteAndCityPassedsOK with default headers values
func NewGetRouteAndCityPassedsOK() *GetRouteAndCityPassedsOK {
	return &GetRouteAndCityPassedsOK{}
}

/*
GetRouteAndCityPassedsOK describes a response with status code 200, with default header values.

OK
*/
type GetRouteAndCityPassedsOK struct {
	Payload *GetRouteAndCityPassedsOKBody
}

// IsSuccess returns true when this get route and city passeds o k response has a 2xx status code
func (o *GetRouteAndCityPassedsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get route and city passeds o k response has a 3xx status code
func (o *GetRouteAndCityPassedsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get route and city passeds o k response has a 4xx status code
func (o *GetRouteAndCityPassedsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get route and city passeds o k response has a 5xx status code
func (o *GetRouteAndCityPassedsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get route and city passeds o k response a status code equal to that given
func (o *GetRouteAndCityPassedsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get route and city passeds o k response
func (o *GetRouteAndCityPassedsOK) Code() int {
	return 200
}

func (o *GetRouteAndCityPassedsOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/routes/{id}][%d] getRouteAndCityPassedsOK  %+v", 200, o.Payload)
}

func (o *GetRouteAndCityPassedsOK) String() string {
	return fmt.Sprintf("[GET /api/v1/routes/{id}][%d] getRouteAndCityPassedsOK  %+v", 200, o.Payload)
}

func (o *GetRouteAndCityPassedsOK) GetPayload() *GetRouteAndCityPassedsOKBody {
	return o.Payload
}

func (o *GetRouteAndCityPassedsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRouteAndCityPassedsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteAndCityPassedsBadRequest creates a GetRouteAndCityPassedsBadRequest with default headers values
func NewGetRouteAndCityPassedsBadRequest() *GetRouteAndCityPassedsBadRequest {
	return &GetRouteAndCityPassedsBadRequest{}
}

/*
GetRouteAndCityPassedsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRouteAndCityPassedsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get route and city passeds bad request response has a 2xx status code
func (o *GetRouteAndCityPassedsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get route and city passeds bad request response has a 3xx status code
func (o *GetRouteAndCityPassedsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get route and city passeds bad request response has a 4xx status code
func (o *GetRouteAndCityPassedsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get route and city passeds bad request response has a 5xx status code
func (o *GetRouteAndCityPassedsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get route and city passeds bad request response a status code equal to that given
func (o *GetRouteAndCityPassedsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get route and city passeds bad request response
func (o *GetRouteAndCityPassedsBadRequest) Code() int {
	return 400
}

func (o *GetRouteAndCityPassedsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/routes/{id}][%d] getRouteAndCityPassedsBadRequest  %+v", 400, o.Payload)
}

func (o *GetRouteAndCityPassedsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v1/routes/{id}][%d] getRouteAndCityPassedsBadRequest  %+v", 400, o.Payload)
}

func (o *GetRouteAndCityPassedsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRouteAndCityPassedsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteAndCityPassedsNotFound creates a GetRouteAndCityPassedsNotFound with default headers values
func NewGetRouteAndCityPassedsNotFound() *GetRouteAndCityPassedsNotFound {
	return &GetRouteAndCityPassedsNotFound{}
}

/*
GetRouteAndCityPassedsNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type GetRouteAndCityPassedsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get route and city passeds not found response has a 2xx status code
func (o *GetRouteAndCityPassedsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get route and city passeds not found response has a 3xx status code
func (o *GetRouteAndCityPassedsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get route and city passeds not found response has a 4xx status code
func (o *GetRouteAndCityPassedsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get route and city passeds not found response has a 5xx status code
func (o *GetRouteAndCityPassedsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get route and city passeds not found response a status code equal to that given
func (o *GetRouteAndCityPassedsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get route and city passeds not found response
func (o *GetRouteAndCityPassedsNotFound) Code() int {
	return 404
}

func (o *GetRouteAndCityPassedsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/routes/{id}][%d] getRouteAndCityPassedsNotFound  %+v", 404, o.Payload)
}

func (o *GetRouteAndCityPassedsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1/routes/{id}][%d] getRouteAndCityPassedsNotFound  %+v", 404, o.Payload)
}

func (o *GetRouteAndCityPassedsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRouteAndCityPassedsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteAndCityPassedsInternalServerError creates a GetRouteAndCityPassedsInternalServerError with default headers values
func NewGetRouteAndCityPassedsInternalServerError() *GetRouteAndCityPassedsInternalServerError {
	return &GetRouteAndCityPassedsInternalServerError{}
}

/*
GetRouteAndCityPassedsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetRouteAndCityPassedsInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get route and city passeds internal server error response has a 2xx status code
func (o *GetRouteAndCityPassedsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get route and city passeds internal server error response has a 3xx status code
func (o *GetRouteAndCityPassedsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get route and city passeds internal server error response has a 4xx status code
func (o *GetRouteAndCityPassedsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get route and city passeds internal server error response has a 5xx status code
func (o *GetRouteAndCityPassedsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get route and city passeds internal server error response a status code equal to that given
func (o *GetRouteAndCityPassedsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get route and city passeds internal server error response
func (o *GetRouteAndCityPassedsInternalServerError) Code() int {
	return 500
}

func (o *GetRouteAndCityPassedsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/routes/{id}][%d] getRouteAndCityPassedsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRouteAndCityPassedsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v1/routes/{id}][%d] getRouteAndCityPassedsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRouteAndCityPassedsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRouteAndCityPassedsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteAndCityPassedsDefault creates a GetRouteAndCityPassedsDefault with default headers values
func NewGetRouteAndCityPassedsDefault(code int) *GetRouteAndCityPassedsDefault {
	return &GetRouteAndCityPassedsDefault{
		_statusCode: code,
	}
}

/*
GetRouteAndCityPassedsDefault describes a response with status code -1, with default header values.

error
*/
type GetRouteAndCityPassedsDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this get route and city passeds default response has a 2xx status code
func (o *GetRouteAndCityPassedsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get route and city passeds default response has a 3xx status code
func (o *GetRouteAndCityPassedsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get route and city passeds default response has a 4xx status code
func (o *GetRouteAndCityPassedsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get route and city passeds default response has a 5xx status code
func (o *GetRouteAndCityPassedsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get route and city passeds default response a status code equal to that given
func (o *GetRouteAndCityPassedsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get route and city passeds default response
func (o *GetRouteAndCityPassedsDefault) Code() int {
	return o._statusCode
}

func (o *GetRouteAndCityPassedsDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/routes/{id}][%d] getRouteAndCityPasseds default  %+v", o._statusCode, o.Payload)
}

func (o *GetRouteAndCityPassedsDefault) String() string {
	return fmt.Sprintf("[GET /api/v1/routes/{id}][%d] getRouteAndCityPasseds default  %+v", o._statusCode, o.Payload)
}

func (o *GetRouteAndCityPassedsDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRouteAndCityPassedsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetRouteAndCityPassedsOKBody get route and city passeds o k body
swagger:model GetRouteAndCityPassedsOKBody
*/
type GetRouteAndCityPassedsOKBody struct {

	// city passeds
	CityPasseds []string `json:"city_passeds"`

	// destination city
	DestinationCity string `json:"destination_city,omitempty"`

	// origin city
	OriginCity string `json:"origin_city,omitempty"`
}

// Validate validates this get route and city passeds o k body
func (o *GetRouteAndCityPassedsOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get route and city passeds o k body based on context it is used
func (o *GetRouteAndCityPassedsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetRouteAndCityPassedsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRouteAndCityPassedsOKBody) UnmarshalBinary(b []byte) error {
	var res GetRouteAndCityPassedsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
