// Code generated by go-swagger; DO NOT EDIT.

package login

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"kurirmoo/gen/models"
)

// AuthReader is a Reader for the Auth structure.
type AuthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAuthBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAuthDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAuthOK creates a AuthOK with default headers values
func NewAuthOK() *AuthOK {
	return &AuthOK{}
}

/*
AuthOK describes a response with status code 200, with default header values.

Login success
*/
type AuthOK struct {
	Payload *AuthOKBody
}

// IsSuccess returns true when this auth o k response has a 2xx status code
func (o *AuthOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this auth o k response has a 3xx status code
func (o *AuthOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth o k response has a 4xx status code
func (o *AuthOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth o k response has a 5xx status code
func (o *AuthOK) IsServerError() bool {
	return false
}

// IsCode returns true when this auth o k response a status code equal to that given
func (o *AuthOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the auth o k response
func (o *AuthOK) Code() int {
	return 200
}

func (o *AuthOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/login][%d] authOK  %+v", 200, o.Payload)
}

func (o *AuthOK) String() string {
	return fmt.Sprintf("[POST /api/v1/login][%d] authOK  %+v", 200, o.Payload)
}

func (o *AuthOK) GetPayload() *AuthOKBody {
	return o.Payload
}

func (o *AuthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AuthOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthBadRequest creates a AuthBadRequest with default headers values
func NewAuthBadRequest() *AuthBadRequest {
	return &AuthBadRequest{}
}

/*
AuthBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AuthBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this auth bad request response has a 2xx status code
func (o *AuthBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth bad request response has a 3xx status code
func (o *AuthBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth bad request response has a 4xx status code
func (o *AuthBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth bad request response has a 5xx status code
func (o *AuthBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this auth bad request response a status code equal to that given
func (o *AuthBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the auth bad request response
func (o *AuthBadRequest) Code() int {
	return 400
}

func (o *AuthBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/login][%d] authBadRequest  %+v", 400, o.Payload)
}

func (o *AuthBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/login][%d] authBadRequest  %+v", 400, o.Payload)
}

func (o *AuthBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AuthBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthDefault creates a AuthDefault with default headers values
func NewAuthDefault(code int) *AuthDefault {
	return &AuthDefault{
		_statusCode: code,
	}
}

/*
AuthDefault describes a response with status code -1, with default header values.

error
*/
type AuthDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this auth default response has a 2xx status code
func (o *AuthDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this auth default response has a 3xx status code
func (o *AuthDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this auth default response has a 4xx status code
func (o *AuthDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this auth default response has a 5xx status code
func (o *AuthDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this auth default response a status code equal to that given
func (o *AuthDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the auth default response
func (o *AuthDefault) Code() int {
	return o._statusCode
}

func (o *AuthDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/login][%d] auth default  %+v", o._statusCode, o.Payload)
}

func (o *AuthDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/login][%d] auth default  %+v", o._statusCode, o.Payload)
}

func (o *AuthDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *AuthDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
AuthBody auth body
swagger:model AuthBody
*/
type AuthBody struct {

	// email
	// Required: true
	Email *string `json:"email"`

	// password
	// Required: true
	Password *string `json:"password"`
}

// Validate validates this auth body
func (o *AuthBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AuthBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

func (o *AuthBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this auth body based on context it is used
func (o *AuthBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthBody) UnmarshalBinary(b []byte) error {
	var res AuthBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AuthOKBody auth o k body
swagger:model AuthOKBody
*/
type AuthOKBody struct {

	// expired at
	ExpiredAt string `json:"expired_at,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this auth o k body
func (o *AuthOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth o k body based on context it is used
func (o *AuthOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthOKBody) UnmarshalBinary(b []byte) error {
	var res AuthOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
