// Code generated by go-swagger; DO NOT EDIT.

package update_city

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"kurirmoo/gen/models"
)

// UpdateCityReader is a Reader for the UpdateCity structure.
type UpdateCityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateCityMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateCityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateCityDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateCityOK creates a UpdateCityOK with default headers values
func NewUpdateCityOK() *UpdateCityOK {
	return &UpdateCityOK{}
}

/*
UpdateCityOK describes a response with status code 200, with default header values.

OK
*/
type UpdateCityOK struct {
	Payload *UpdateCityOKBody
}

// IsSuccess returns true when this update city o k response has a 2xx status code
func (o *UpdateCityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update city o k response has a 3xx status code
func (o *UpdateCityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update city o k response has a 4xx status code
func (o *UpdateCityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update city o k response has a 5xx status code
func (o *UpdateCityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update city o k response a status code equal to that given
func (o *UpdateCityOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update city o k response
func (o *UpdateCityOK) Code() int {
	return 200
}

func (o *UpdateCityOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/cities/{id}][%d] updateCityOK  %+v", 200, o.Payload)
}

func (o *UpdateCityOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/cities/{id}][%d] updateCityOK  %+v", 200, o.Payload)
}

func (o *UpdateCityOK) GetPayload() *UpdateCityOKBody {
	return o.Payload
}

func (o *UpdateCityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateCityOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCityBadRequest creates a UpdateCityBadRequest with default headers values
func NewUpdateCityBadRequest() *UpdateCityBadRequest {
	return &UpdateCityBadRequest{}
}

/*
UpdateCityBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateCityBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update city bad request response has a 2xx status code
func (o *UpdateCityBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update city bad request response has a 3xx status code
func (o *UpdateCityBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update city bad request response has a 4xx status code
func (o *UpdateCityBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update city bad request response has a 5xx status code
func (o *UpdateCityBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update city bad request response a status code equal to that given
func (o *UpdateCityBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update city bad request response
func (o *UpdateCityBadRequest) Code() int {
	return 400
}

func (o *UpdateCityBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/cities/{id}][%d] updateCityBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCityBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/cities/{id}][%d] updateCityBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCityBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCityNotFound creates a UpdateCityNotFound with default headers values
func NewUpdateCityNotFound() *UpdateCityNotFound {
	return &UpdateCityNotFound{}
}

/*
UpdateCityNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type UpdateCityNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update city not found response has a 2xx status code
func (o *UpdateCityNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update city not found response has a 3xx status code
func (o *UpdateCityNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update city not found response has a 4xx status code
func (o *UpdateCityNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update city not found response has a 5xx status code
func (o *UpdateCityNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update city not found response a status code equal to that given
func (o *UpdateCityNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update city not found response
func (o *UpdateCityNotFound) Code() int {
	return 404
}

func (o *UpdateCityNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/cities/{id}][%d] updateCityNotFound  %+v", 404, o.Payload)
}

func (o *UpdateCityNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/cities/{id}][%d] updateCityNotFound  %+v", 404, o.Payload)
}

func (o *UpdateCityNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCityMethodNotAllowed creates a UpdateCityMethodNotAllowed with default headers values
func NewUpdateCityMethodNotAllowed() *UpdateCityMethodNotAllowed {
	return &UpdateCityMethodNotAllowed{}
}

/*
UpdateCityMethodNotAllowed describes a response with status code 405, with default header values.

MethodNotAllowed
*/
type UpdateCityMethodNotAllowed struct {
	Payload *models.Error
}

// IsSuccess returns true when this update city method not allowed response has a 2xx status code
func (o *UpdateCityMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update city method not allowed response has a 3xx status code
func (o *UpdateCityMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update city method not allowed response has a 4xx status code
func (o *UpdateCityMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update city method not allowed response has a 5xx status code
func (o *UpdateCityMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update city method not allowed response a status code equal to that given
func (o *UpdateCityMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the update city method not allowed response
func (o *UpdateCityMethodNotAllowed) Code() int {
	return 405
}

func (o *UpdateCityMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /api/v1/cities/{id}][%d] updateCityMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateCityMethodNotAllowed) String() string {
	return fmt.Sprintf("[PUT /api/v1/cities/{id}][%d] updateCityMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateCityMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCityMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCityInternalServerError creates a UpdateCityInternalServerError with default headers values
func NewUpdateCityInternalServerError() *UpdateCityInternalServerError {
	return &UpdateCityInternalServerError{}
}

/*
UpdateCityInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateCityInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update city internal server error response has a 2xx status code
func (o *UpdateCityInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update city internal server error response has a 3xx status code
func (o *UpdateCityInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update city internal server error response has a 4xx status code
func (o *UpdateCityInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update city internal server error response has a 5xx status code
func (o *UpdateCityInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update city internal server error response a status code equal to that given
func (o *UpdateCityInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update city internal server error response
func (o *UpdateCityInternalServerError) Code() int {
	return 500
}

func (o *UpdateCityInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/cities/{id}][%d] updateCityInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateCityInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/cities/{id}][%d] updateCityInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateCityInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCityDefault creates a UpdateCityDefault with default headers values
func NewUpdateCityDefault(code int) *UpdateCityDefault {
	return &UpdateCityDefault{
		_statusCode: code,
	}
}

/*
UpdateCityDefault describes a response with status code -1, with default header values.

error
*/
type UpdateCityDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this update city default response has a 2xx status code
func (o *UpdateCityDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update city default response has a 3xx status code
func (o *UpdateCityDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update city default response has a 4xx status code
func (o *UpdateCityDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update city default response has a 5xx status code
func (o *UpdateCityDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update city default response a status code equal to that given
func (o *UpdateCityDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update city default response
func (o *UpdateCityDefault) Code() int {
	return o._statusCode
}

func (o *UpdateCityDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/cities/{id}][%d] updateCity default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateCityDefault) String() string {
	return fmt.Sprintf("[PUT /api/v1/cities/{id}][%d] updateCity default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateCityDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCityDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateCityOKBody update city o k body
swagger:model UpdateCityOKBody
*/
type UpdateCityOKBody struct {

	// code
	Code string `json:"code,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this update city o k body
func (o *UpdateCityOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update city o k body based on context it is used
func (o *UpdateCityOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCityOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCityOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateCityOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
