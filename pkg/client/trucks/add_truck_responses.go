// Code generated by go-swagger; DO NOT EDIT.

package trucks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"kurirmoo/gen/models"
)

// AddTruckReader is a Reader for the AddTruck structure.
type AddTruckReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddTruckReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAddTruckCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddTruckBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAddTruckDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddTruckCreated creates a AddTruckCreated with default headers values
func NewAddTruckCreated() *AddTruckCreated {
	return &AddTruckCreated{}
}

/*
AddTruckCreated describes a response with status code 201, with default header values.

Success added
*/
type AddTruckCreated struct {
	Payload *models.Success
}

// IsSuccess returns true when this add truck created response has a 2xx status code
func (o *AddTruckCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add truck created response has a 3xx status code
func (o *AddTruckCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add truck created response has a 4xx status code
func (o *AddTruckCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this add truck created response has a 5xx status code
func (o *AddTruckCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this add truck created response a status code equal to that given
func (o *AddTruckCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the add truck created response
func (o *AddTruckCreated) Code() int {
	return 201
}

func (o *AddTruckCreated) Error() string {
	return fmt.Sprintf("[POST /api/v1/trucks][%d] addTruckCreated  %+v", 201, o.Payload)
}

func (o *AddTruckCreated) String() string {
	return fmt.Sprintf("[POST /api/v1/trucks][%d] addTruckCreated  %+v", 201, o.Payload)
}

func (o *AddTruckCreated) GetPayload() *models.Success {
	return o.Payload
}

func (o *AddTruckCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Success)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTruckBadRequest creates a AddTruckBadRequest with default headers values
func NewAddTruckBadRequest() *AddTruckBadRequest {
	return &AddTruckBadRequest{}
}

/*
AddTruckBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddTruckBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this add truck bad request response has a 2xx status code
func (o *AddTruckBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add truck bad request response has a 3xx status code
func (o *AddTruckBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add truck bad request response has a 4xx status code
func (o *AddTruckBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add truck bad request response has a 5xx status code
func (o *AddTruckBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add truck bad request response a status code equal to that given
func (o *AddTruckBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add truck bad request response
func (o *AddTruckBadRequest) Code() int {
	return 400
}

func (o *AddTruckBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/trucks][%d] addTruckBadRequest  %+v", 400, o.Payload)
}

func (o *AddTruckBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/trucks][%d] addTruckBadRequest  %+v", 400, o.Payload)
}

func (o *AddTruckBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddTruckBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTruckDefault creates a AddTruckDefault with default headers values
func NewAddTruckDefault(code int) *AddTruckDefault {
	return &AddTruckDefault{
		_statusCode: code,
	}
}

/*
AddTruckDefault describes a response with status code -1, with default header values.

error
*/
type AddTruckDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this add truck default response has a 2xx status code
func (o *AddTruckDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this add truck default response has a 3xx status code
func (o *AddTruckDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this add truck default response has a 4xx status code
func (o *AddTruckDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this add truck default response has a 5xx status code
func (o *AddTruckDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this add truck default response a status code equal to that given
func (o *AddTruckDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the add truck default response
func (o *AddTruckDefault) Code() int {
	return o._statusCode
}

func (o *AddTruckDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/trucks][%d] addTruck default  %+v", o._statusCode, o.Payload)
}

func (o *AddTruckDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/trucks][%d] addTruck default  %+v", o._statusCode, o.Payload)
}

func (o *AddTruckDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddTruckDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
AddTruckBody add truck body
swagger:model AddTruckBody
*/
type AddTruckBody struct {

	// brand
	// Required: true
	Brand *string `json:"brand"`

	// capacity
	// Required: true
	Capacity *int64 `json:"capacity"`

	// height
	// Required: true
	Height *int64 `json:"height"`

	// length
	// Required: true
	Length *int64 `json:"length"`

	// truck kind
	// Required: true
	TruckKind *string `json:"truck_kind"`

	// truck type
	// Required: true
	TruckType *string `json:"truck_type"`

	// width
	// Required: true
	Width *int64 `json:"width"`
}

// Validate validates this add truck body
func (o *AddTruckBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBrand(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTruckKind(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTruckType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWidth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddTruckBody) validateBrand(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"brand", "body", o.Brand); err != nil {
		return err
	}

	return nil
}

func (o *AddTruckBody) validateCapacity(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"capacity", "body", o.Capacity); err != nil {
		return err
	}

	return nil
}

func (o *AddTruckBody) validateHeight(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"height", "body", o.Height); err != nil {
		return err
	}

	return nil
}

func (o *AddTruckBody) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"length", "body", o.Length); err != nil {
		return err
	}

	return nil
}

func (o *AddTruckBody) validateTruckKind(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"truck_kind", "body", o.TruckKind); err != nil {
		return err
	}

	return nil
}

func (o *AddTruckBody) validateTruckType(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"truck_type", "body", o.TruckType); err != nil {
		return err
	}

	return nil
}

func (o *AddTruckBody) validateWidth(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"width", "body", o.Width); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add truck body based on context it is used
func (o *AddTruckBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddTruckBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddTruckBody) UnmarshalBinary(b []byte) error {
	var res AddTruckBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
