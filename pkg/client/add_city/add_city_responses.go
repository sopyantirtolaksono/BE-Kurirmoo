// Code generated by go-swagger; DO NOT EDIT.

package add_city

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"kurirmoo/gen/models"
)

// AddCityReader is a Reader for the AddCity structure.
type AddCityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddCityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddCityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddCityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAddCityDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddCityOK creates a AddCityOK with default headers values
func NewAddCityOK() *AddCityOK {
	return &AddCityOK{}
}

/*
AddCityOK describes a response with status code 200, with default header values.

Add city success
*/
type AddCityOK struct {
	Payload *AddCityOKBody
}

// IsSuccess returns true when this add city o k response has a 2xx status code
func (o *AddCityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add city o k response has a 3xx status code
func (o *AddCityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add city o k response has a 4xx status code
func (o *AddCityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add city o k response has a 5xx status code
func (o *AddCityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add city o k response a status code equal to that given
func (o *AddCityOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add city o k response
func (o *AddCityOK) Code() int {
	return 200
}

func (o *AddCityOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/city][%d] addCityOK  %+v", 200, o.Payload)
}

func (o *AddCityOK) String() string {
	return fmt.Sprintf("[POST /api/v1/city][%d] addCityOK  %+v", 200, o.Payload)
}

func (o *AddCityOK) GetPayload() *AddCityOKBody {
	return o.Payload
}

func (o *AddCityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddCityOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCityBadRequest creates a AddCityBadRequest with default headers values
func NewAddCityBadRequest() *AddCityBadRequest {
	return &AddCityBadRequest{}
}

/*
AddCityBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddCityBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this add city bad request response has a 2xx status code
func (o *AddCityBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add city bad request response has a 3xx status code
func (o *AddCityBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add city bad request response has a 4xx status code
func (o *AddCityBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add city bad request response has a 5xx status code
func (o *AddCityBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add city bad request response a status code equal to that given
func (o *AddCityBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add city bad request response
func (o *AddCityBadRequest) Code() int {
	return 400
}

func (o *AddCityBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/city][%d] addCityBadRequest  %+v", 400, o.Payload)
}

func (o *AddCityBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/city][%d] addCityBadRequest  %+v", 400, o.Payload)
}

func (o *AddCityBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddCityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCityDefault creates a AddCityDefault with default headers values
func NewAddCityDefault(code int) *AddCityDefault {
	return &AddCityDefault{
		_statusCode: code,
	}
}

/*
AddCityDefault describes a response with status code -1, with default header values.

error
*/
type AddCityDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this add city default response has a 2xx status code
func (o *AddCityDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this add city default response has a 3xx status code
func (o *AddCityDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this add city default response has a 4xx status code
func (o *AddCityDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this add city default response has a 5xx status code
func (o *AddCityDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this add city default response a status code equal to that given
func (o *AddCityDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the add city default response
func (o *AddCityDefault) Code() int {
	return o._statusCode
}

func (o *AddCityDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/city][%d] addCity default  %+v", o._statusCode, o.Payload)
}

func (o *AddCityDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/city][%d] addCity default  %+v", o._statusCode, o.Payload)
}

func (o *AddCityDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddCityDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
AddCityBody add city body
swagger:model AddCityBody
*/
type AddCityBody struct {

	// code
	// Required: true
	Code *string `json:"code"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this add city body
func (o *AddCityBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddCityBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *AddCityBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add city body based on context it is used
func (o *AddCityBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddCityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddCityBody) UnmarshalBinary(b []byte) error {
	var res AddCityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddCityOKBody add city o k body
swagger:model AddCityOKBody
*/
type AddCityOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add city o k body
func (o *AddCityOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add city o k body based on context it is used
func (o *AddCityOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddCityOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddCityOKBody) UnmarshalBinary(b []byte) error {
	var res AddCityOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
