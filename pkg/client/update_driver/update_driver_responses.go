// Code generated by go-swagger; DO NOT EDIT.

package update_driver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"kurirmoo/gen/models"
)

// UpdateDriverReader is a Reader for the UpdateDriver structure.
type UpdateDriverReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDriverReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDriverOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDriverBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateDriverDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateDriverOK creates a UpdateDriverOK with default headers values
func NewUpdateDriverOK() *UpdateDriverOK {
	return &UpdateDriverOK{}
}

/*
UpdateDriverOK describes a response with status code 200, with default header values.

OK
*/
type UpdateDriverOK struct {
	Payload *models.Success
}

// IsSuccess returns true when this update driver o k response has a 2xx status code
func (o *UpdateDriverOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update driver o k response has a 3xx status code
func (o *UpdateDriverOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update driver o k response has a 4xx status code
func (o *UpdateDriverOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update driver o k response has a 5xx status code
func (o *UpdateDriverOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update driver o k response a status code equal to that given
func (o *UpdateDriverOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update driver o k response
func (o *UpdateDriverOK) Code() int {
	return 200
}

func (o *UpdateDriverOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/drivers/{id}][%d] updateDriverOK  %+v", 200, o.Payload)
}

func (o *UpdateDriverOK) String() string {
	return fmt.Sprintf("[PATCH /api/v1/drivers/{id}][%d] updateDriverOK  %+v", 200, o.Payload)
}

func (o *UpdateDriverOK) GetPayload() *models.Success {
	return o.Payload
}

func (o *UpdateDriverOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Success)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDriverBadRequest creates a UpdateDriverBadRequest with default headers values
func NewUpdateDriverBadRequest() *UpdateDriverBadRequest {
	return &UpdateDriverBadRequest{}
}

/*
UpdateDriverBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateDriverBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update driver bad request response has a 2xx status code
func (o *UpdateDriverBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update driver bad request response has a 3xx status code
func (o *UpdateDriverBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update driver bad request response has a 4xx status code
func (o *UpdateDriverBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update driver bad request response has a 5xx status code
func (o *UpdateDriverBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update driver bad request response a status code equal to that given
func (o *UpdateDriverBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update driver bad request response
func (o *UpdateDriverBadRequest) Code() int {
	return 400
}

func (o *UpdateDriverBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/drivers/{id}][%d] updateDriverBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDriverBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v1/drivers/{id}][%d] updateDriverBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDriverBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateDriverBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDriverDefault creates a UpdateDriverDefault with default headers values
func NewUpdateDriverDefault(code int) *UpdateDriverDefault {
	return &UpdateDriverDefault{
		_statusCode: code,
	}
}

/*
UpdateDriverDefault describes a response with status code -1, with default header values.

Error
*/
type UpdateDriverDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this update driver default response has a 2xx status code
func (o *UpdateDriverDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update driver default response has a 3xx status code
func (o *UpdateDriverDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update driver default response has a 4xx status code
func (o *UpdateDriverDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update driver default response has a 5xx status code
func (o *UpdateDriverDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update driver default response a status code equal to that given
func (o *UpdateDriverDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update driver default response
func (o *UpdateDriverDefault) Code() int {
	return o._statusCode
}

func (o *UpdateDriverDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/drivers/{id}][%d] updateDriver default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateDriverDefault) String() string {
	return fmt.Sprintf("[PATCH /api/v1/drivers/{id}][%d] updateDriver default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateDriverDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateDriverDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateDriverBody update driver body
swagger:model UpdateDriverBody
*/
type UpdateDriverBody struct {

	// phone number
	// Required: true
	PhoneNumber *string `json:"phone_number"`

	// phone number 2
	PhoneNumber2 string `json:"phone_number_2,omitempty"`
}

// Validate validates this update driver body
func (o *UpdateDriverBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDriverBody) validatePhoneNumber(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"phone_number", "body", o.PhoneNumber); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update driver body based on context it is used
func (o *UpdateDriverBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDriverBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDriverBody) UnmarshalBinary(b []byte) error {
	var res UpdateDriverBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
