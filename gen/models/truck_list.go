// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TruckList truck list
//
// swagger:model TruckList
type TruckList struct {
	ModelTrackTime

	ModelIdentifier

	// brand
	// Required: true
	Brand *string `json:"brand" gorm:"type:varchar(50);not null"`

	// capacity
	// Required: true
	Capacity *int64 `json:"capacity" gorm:"type:integer;not null"`

	// height
	// Required: true
	Height *int64 `json:"height" gorm:"type:integer;not null"`

	// length
	// Required: true
	Length *int64 `json:"length" gorm:"type:integer;not null"`

	// truck kind
	// Required: true
	TruckKind *string `json:"truck_kind" gorm:"type:varchar(50);not null"`

	// truck type
	// Required: true
	TruckType *string `json:"truck_type" gorm:"type:varchar(50);not null"`

	// width
	// Required: true
	Width *int64 `json:"width" gorm:"type:integer;not null"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TruckList) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ModelTrackTime
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ModelTrackTime = aO0

	// AO1
	var aO1 ModelIdentifier
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.ModelIdentifier = aO1

	// AO2
	var dataAO2 struct {
		Brand *string `json:"brand"`

		Capacity *int64 `json:"capacity"`

		Height *int64 `json:"height"`

		Length *int64 `json:"length"`

		TruckKind *string `json:"truck_kind"`

		TruckType *string `json:"truck_type"`

		Width *int64 `json:"width"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.Brand = dataAO2.Brand

	m.Capacity = dataAO2.Capacity

	m.Height = dataAO2.Height

	m.Length = dataAO2.Length

	m.TruckKind = dataAO2.TruckKind

	m.TruckType = dataAO2.TruckType

	m.Width = dataAO2.Width

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TruckList) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.ModelTrackTime)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.ModelIdentifier)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		Brand *string `json:"brand"`

		Capacity *int64 `json:"capacity"`

		Height *int64 `json:"height"`

		Length *int64 `json:"length"`

		TruckKind *string `json:"truck_kind"`

		TruckType *string `json:"truck_type"`

		Width *int64 `json:"width"`
	}

	dataAO2.Brand = m.Brand

	dataAO2.Capacity = m.Capacity

	dataAO2.Height = m.Height

	dataAO2.Length = m.Length

	dataAO2.TruckKind = m.TruckKind

	dataAO2.TruckType = m.TruckType

	dataAO2.Width = m.Width

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this truck list
func (m *TruckList) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ModelTrackTime
	if err := m.ModelTrackTime.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ModelIdentifier
	if err := m.ModelIdentifier.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTruckKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTruckType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWidth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TruckList) validateBrand(formats strfmt.Registry) error {

	if err := validate.Required("brand", "body", m.Brand); err != nil {
		return err
	}

	return nil
}

func (m *TruckList) validateCapacity(formats strfmt.Registry) error {

	if err := validate.Required("capacity", "body", m.Capacity); err != nil {
		return err
	}

	return nil
}

func (m *TruckList) validateHeight(formats strfmt.Registry) error {

	if err := validate.Required("height", "body", m.Height); err != nil {
		return err
	}

	return nil
}

func (m *TruckList) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("length", "body", m.Length); err != nil {
		return err
	}

	return nil
}

func (m *TruckList) validateTruckKind(formats strfmt.Registry) error {

	if err := validate.Required("truck_kind", "body", m.TruckKind); err != nil {
		return err
	}

	return nil
}

func (m *TruckList) validateTruckType(formats strfmt.Registry) error {

	if err := validate.Required("truck_type", "body", m.TruckType); err != nil {
		return err
	}

	return nil
}

func (m *TruckList) validateWidth(formats strfmt.Registry) error {

	if err := validate.Required("width", "body", m.Width); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this truck list based on the context it is used
func (m *TruckList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ModelTrackTime
	if err := m.ModelTrackTime.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ModelIdentifier
	if err := m.ModelIdentifier.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *TruckList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TruckList) UnmarshalBinary(b []byte) error {
	var res TruckList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
