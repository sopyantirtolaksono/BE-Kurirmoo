// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Customer customer
//
// swagger:model Customer
type Customer struct {
	User

	// account status
	// Enum: [active not-active]
	AccountStatus string `json:"account_status,omitempty" gorm:"type:varchar(255);not null;default:'active'"`

	// corporate name
	CorporateName string `json:"corporate_name,omitempty" gorm:"type:varchar(100);not null"`

	// is corporate
	IsCorporate bool `json:"is_corporate,omitempty" gorm:"type:boolean;not null"`

	// ktp image
	KtpImage string `json:"ktp_image,omitempty" gorm:"type:varchar(255);not null"`

	// ktp number
	KtpNumber string `json:"ktp_number,omitempty" gorm:"type:varchar(16);not null"`

	// name
	// Required: true
	Name *string `json:"name" gorm:"type:varchar(100);not null"`

	// nib
	Nib string `json:"nib,omitempty" gorm:"type:varchar(16);null"`

	// npwp image
	NpwpImage string `json:"npwp_image,omitempty" gorm:"type:varchar(255);null"`

	// npwp number
	NpwpNumber string `json:"npwp_number,omitempty" gorm:"type:varchar(16);null"`

	// request status
	// Enum: [Packaging Shipped Delivered]
	RequestStatus string `json:"request_status,omitempty" gorm:"type:varchar(255);not null;default:'Packaging'"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Customer) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 User
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.User = aO0

	// AO1
	var dataAO1 struct {
		AccountStatus string `json:"account_status,omitempty"`

		CorporateName string `json:"corporate_name,omitempty"`

		IsCorporate bool `json:"is_corporate,omitempty"`

		KtpImage string `json:"ktp_image,omitempty"`

		KtpNumber string `json:"ktp_number,omitempty"`

		Name *string `json:"name"`

		Nib string `json:"nib,omitempty"`

		NpwpImage string `json:"npwp_image,omitempty"`

		NpwpNumber string `json:"npwp_number,omitempty"`

		RequestStatus string `json:"request_status,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AccountStatus = dataAO1.AccountStatus

	m.CorporateName = dataAO1.CorporateName

	m.IsCorporate = dataAO1.IsCorporate

	m.KtpImage = dataAO1.KtpImage

	m.KtpNumber = dataAO1.KtpNumber

	m.Name = dataAO1.Name

	m.Nib = dataAO1.Nib

	m.NpwpImage = dataAO1.NpwpImage

	m.NpwpNumber = dataAO1.NpwpNumber

	m.RequestStatus = dataAO1.RequestStatus

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Customer) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.User)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AccountStatus string `json:"account_status,omitempty"`

		CorporateName string `json:"corporate_name,omitempty"`

		IsCorporate bool `json:"is_corporate,omitempty"`

		KtpImage string `json:"ktp_image,omitempty"`

		KtpNumber string `json:"ktp_number,omitempty"`

		Name *string `json:"name"`

		Nib string `json:"nib,omitempty"`

		NpwpImage string `json:"npwp_image,omitempty"`

		NpwpNumber string `json:"npwp_number,omitempty"`

		RequestStatus string `json:"request_status,omitempty"`
	}

	dataAO1.AccountStatus = m.AccountStatus

	dataAO1.CorporateName = m.CorporateName

	dataAO1.IsCorporate = m.IsCorporate

	dataAO1.KtpImage = m.KtpImage

	dataAO1.KtpNumber = m.KtpNumber

	dataAO1.Name = m.Name

	dataAO1.Nib = m.Nib

	dataAO1.NpwpImage = m.NpwpImage

	dataAO1.NpwpNumber = m.NpwpNumber

	dataAO1.RequestStatus = m.RequestStatus

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this customer
func (m *Customer) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with User
	if err := m.User.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var customerTypeAccountStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","not-active"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTypeAccountStatusPropEnum = append(customerTypeAccountStatusPropEnum, v)
	}
}

// property enum
func (m *Customer) validateAccountStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerTypeAccountStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Customer) validateAccountStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccountStatusEnum("account_status", "body", m.AccountStatus); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var customerTypeRequestStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Packaging","Shipped","Delivered"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTypeRequestStatusPropEnum = append(customerTypeRequestStatusPropEnum, v)
	}
}

// property enum
func (m *Customer) validateRequestStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerTypeRequestStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Customer) validateRequestStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestStatusEnum("request_status", "body", m.RequestStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this customer based on the context it is used
func (m *Customer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with User
	if err := m.User.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Customer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Customer) UnmarshalBinary(b []byte) error {
	var res Customer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
