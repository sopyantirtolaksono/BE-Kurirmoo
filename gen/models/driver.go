// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Driver driver
//
// swagger:model Driver
type Driver struct {
	User

	// color truck
	ColorTruck string `json:"color_truck,omitempty"`

	// company id
	CompanyID uint64 `json:"company_id,omitempty" gorm:"type:varchar;nullable"`

	// ktp image
	// Required: true
	KtpImage *string `json:"ktp_image" gorm:"type:varchar(255);not null"`

	// ktp number
	// Required: true
	KtpNumber *string `json:"ktp_number" gorm:"type:varchar(16);not null"`

	// name
	// Required: true
	Name *string `json:"name" gorm:"type:varchar(100);not null"`

	// sim image
	// Required: true
	SimImage *string `json:"sim_image" gorm:"type:varchar(255);not null"`

	// sim number
	// Required: true
	SimNumber *string `json:"sim_number" gorm:"type:varchar(16);not null"`

	// stnk image
	StnkImage string `json:"stnk_image,omitempty" gorm:"type:varchar(255);not null"`

	// stnk number
	StnkNumber string `json:"stnk_number,omitempty" gorm:"type:varchar(16);not null"`

	// trip status
	// Enum: [online offline]
	TripStatus string `json:"trip_status,omitempty" gorm:"type:varchar(255);not null;default:'online'"`

	// truck image 1
	TruckImage1 string `json:"truck_Image_1,omitempty" gorm:"type:varchar(255);not null"`

	// truck image 2
	TruckImage2 string `json:"truck_Image_2,omitempty" gorm:"type:varchar(255);not null"`

	// truck image 3
	TruckImage3 string `json:"truck_Image_3,omitempty" gorm:"type:varchar(255);not null"`

	// vehicle plate
	// Required: true
	VehiclePlate *string `json:"vehicle_plate" gorm:"type:varchar(10);not null"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Driver) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 User
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.User = aO0

	// AO1
	var dataAO1 struct {
		ColorTruck string `json:"color_truck,omitempty"`

		CompanyID uint64 `json:"company_id,omitempty"`

		KtpImage *string `json:"ktp_image"`

		KtpNumber *string `json:"ktp_number"`

		Name *string `json:"name"`

		SimImage *string `json:"sim_image"`

		SimNumber *string `json:"sim_number"`

		StnkImage string `json:"stnk_image,omitempty"`

		StnkNumber string `json:"stnk_number,omitempty"`

		TripStatus string `json:"trip_status,omitempty"`

		TruckImage1 string `json:"truck_Image_1,omitempty"`

		TruckImage2 string `json:"truck_Image_2,omitempty"`

		TruckImage3 string `json:"truck_Image_3,omitempty"`

		VehiclePlate *string `json:"vehicle_plate"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ColorTruck = dataAO1.ColorTruck

	m.CompanyID = dataAO1.CompanyID

	m.KtpImage = dataAO1.KtpImage

	m.KtpNumber = dataAO1.KtpNumber

	m.Name = dataAO1.Name

	m.SimImage = dataAO1.SimImage

	m.SimNumber = dataAO1.SimNumber

	m.StnkImage = dataAO1.StnkImage

	m.StnkNumber = dataAO1.StnkNumber

	m.TripStatus = dataAO1.TripStatus

	m.TruckImage1 = dataAO1.TruckImage1

	m.TruckImage2 = dataAO1.TruckImage2

	m.TruckImage3 = dataAO1.TruckImage3

	m.VehiclePlate = dataAO1.VehiclePlate

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Driver) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.User)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ColorTruck string `json:"color_truck,omitempty"`

		CompanyID uint64 `json:"company_id,omitempty"`

		KtpImage *string `json:"ktp_image"`

		KtpNumber *string `json:"ktp_number"`

		Name *string `json:"name"`

		SimImage *string `json:"sim_image"`

		SimNumber *string `json:"sim_number"`

		StnkImage string `json:"stnk_image,omitempty"`

		StnkNumber string `json:"stnk_number,omitempty"`

		TripStatus string `json:"trip_status,omitempty"`

		TruckImage1 string `json:"truck_Image_1,omitempty"`

		TruckImage2 string `json:"truck_Image_2,omitempty"`

		TruckImage3 string `json:"truck_Image_3,omitempty"`

		VehiclePlate *string `json:"vehicle_plate"`
	}

	dataAO1.ColorTruck = m.ColorTruck

	dataAO1.CompanyID = m.CompanyID

	dataAO1.KtpImage = m.KtpImage

	dataAO1.KtpNumber = m.KtpNumber

	dataAO1.Name = m.Name

	dataAO1.SimImage = m.SimImage

	dataAO1.SimNumber = m.SimNumber

	dataAO1.StnkImage = m.StnkImage

	dataAO1.StnkNumber = m.StnkNumber

	dataAO1.TripStatus = m.TripStatus

	dataAO1.TruckImage1 = m.TruckImage1

	dataAO1.TruckImage2 = m.TruckImage2

	dataAO1.TruckImage3 = m.TruckImage3

	dataAO1.VehiclePlate = m.VehiclePlate

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this driver
func (m *Driver) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with User
	if err := m.User.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKtpImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKtpNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSimImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSimNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTripStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVehiclePlate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Driver) validateKtpImage(formats strfmt.Registry) error {

	if err := validate.Required("ktp_image", "body", m.KtpImage); err != nil {
		return err
	}

	return nil
}

func (m *Driver) validateKtpNumber(formats strfmt.Registry) error {

	if err := validate.Required("ktp_number", "body", m.KtpNumber); err != nil {
		return err
	}

	return nil
}

func (m *Driver) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Driver) validateSimImage(formats strfmt.Registry) error {

	if err := validate.Required("sim_image", "body", m.SimImage); err != nil {
		return err
	}

	return nil
}

func (m *Driver) validateSimNumber(formats strfmt.Registry) error {

	if err := validate.Required("sim_number", "body", m.SimNumber); err != nil {
		return err
	}

	return nil
}

var driverTypeTripStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["online","offline"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		driverTypeTripStatusPropEnum = append(driverTypeTripStatusPropEnum, v)
	}
}

// property enum
func (m *Driver) validateTripStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, driverTypeTripStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Driver) validateTripStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.TripStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateTripStatusEnum("trip_status", "body", m.TripStatus); err != nil {
		return err
	}

	return nil
}

func (m *Driver) validateVehiclePlate(formats strfmt.Registry) error {

	if err := validate.Required("vehicle_plate", "body", m.VehiclePlate); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this driver based on the context it is used
func (m *Driver) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with User
	if err := m.User.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Driver) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Driver) UnmarshalBinary(b []byte) error {
	var res Driver
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
