// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Items items
//
// swagger:model Items
type Items struct {
	ModelTrackTime

	ModelIdentifier

	// item category
	// Required: true
	ItemCategory *string `json:"item_category" gorm:"type:varchar(100);not null"`

	// item name
	// Required: true
	ItemName *string `json:"item_name" gorm:"type:varchar(255);not null"`

	// max cubic estimation
	// Required: true
	MaxCubicEstimation *float64 `json:"max_cubic_estimation"`

	// max item weight
	// Required: true
	MaxItemWeight *float64 `json:"max_item_weight"`

	// min cubic estiamtion
	// Required: true
	MinCubicEstiamtion *float64 `json:"min_cubic_estiamtion"`

	// min item weight
	// Required: true
	MinItemWeight *float64 `json:"min_item_weight"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Items) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ModelTrackTime
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ModelTrackTime = aO0

	// AO1
	var aO1 ModelIdentifier
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.ModelIdentifier = aO1

	// AO2
	var dataAO2 struct {
		ItemCategory *string `json:"item_category"`

		ItemName *string `json:"item_name"`

		MaxCubicEstimation *float64 `json:"max_cubic_estimation"`

		MaxItemWeight *float64 `json:"max_item_weight"`

		MinCubicEstiamtion *float64 `json:"min_cubic_estiamtion"`

		MinItemWeight *float64 `json:"min_item_weight"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.ItemCategory = dataAO2.ItemCategory

	m.ItemName = dataAO2.ItemName

	m.MaxCubicEstimation = dataAO2.MaxCubicEstimation

	m.MaxItemWeight = dataAO2.MaxItemWeight

	m.MinCubicEstiamtion = dataAO2.MinCubicEstiamtion

	m.MinItemWeight = dataAO2.MinItemWeight

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Items) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.ModelTrackTime)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.ModelIdentifier)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		ItemCategory *string `json:"item_category"`

		ItemName *string `json:"item_name"`

		MaxCubicEstimation *float64 `json:"max_cubic_estimation"`

		MaxItemWeight *float64 `json:"max_item_weight"`

		MinCubicEstiamtion *float64 `json:"min_cubic_estiamtion"`

		MinItemWeight *float64 `json:"min_item_weight"`
	}

	dataAO2.ItemCategory = m.ItemCategory

	dataAO2.ItemName = m.ItemName

	dataAO2.MaxCubicEstimation = m.MaxCubicEstimation

	dataAO2.MaxItemWeight = m.MaxItemWeight

	dataAO2.MinCubicEstiamtion = m.MinCubicEstiamtion

	dataAO2.MinItemWeight = m.MinItemWeight

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this items
func (m *Items) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ModelTrackTime
	if err := m.ModelTrackTime.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ModelIdentifier
	if err := m.ModelIdentifier.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxCubicEstimation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxItemWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinCubicEstiamtion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinItemWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Items) validateItemCategory(formats strfmt.Registry) error {

	if err := validate.Required("item_category", "body", m.ItemCategory); err != nil {
		return err
	}

	return nil
}

func (m *Items) validateItemName(formats strfmt.Registry) error {

	if err := validate.Required("item_name", "body", m.ItemName); err != nil {
		return err
	}

	return nil
}

func (m *Items) validateMaxCubicEstimation(formats strfmt.Registry) error {

	if err := validate.Required("max_cubic_estimation", "body", m.MaxCubicEstimation); err != nil {
		return err
	}

	return nil
}

func (m *Items) validateMaxItemWeight(formats strfmt.Registry) error {

	if err := validate.Required("max_item_weight", "body", m.MaxItemWeight); err != nil {
		return err
	}

	return nil
}

func (m *Items) validateMinCubicEstiamtion(formats strfmt.Registry) error {

	if err := validate.Required("min_cubic_estiamtion", "body", m.MinCubicEstiamtion); err != nil {
		return err
	}

	return nil
}

func (m *Items) validateMinItemWeight(formats strfmt.Registry) error {

	if err := validate.Required("min_item_weight", "body", m.MinItemWeight); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this items based on the context it is used
func (m *Items) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ModelTrackTime
	if err := m.ModelTrackTime.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ModelIdentifier
	if err := m.ModelIdentifier.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Items) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Items) UnmarshalBinary(b []byte) error {
	var res Items
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
