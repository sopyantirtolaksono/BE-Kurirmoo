// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataMultiplier data multiplier
//
// swagger:model DataMultiplier
type DataMultiplier struct {
	ModelTrackTime

	ModelIdentifier

	// max price
	// Required: true
	MaxPrice *float64 `json:"max_price" gorm:"not null"`

	// min price
	// Required: true
	MinPrice *float64 `json:"min_price" gorm:"not null"`

	// route id
	// Required: true
	RouteID *float64 `json:"route_id"`

	// truck id
	// Required: true
	TruckID *float64 `json:"truck_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DataMultiplier) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ModelTrackTime
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ModelTrackTime = aO0

	// AO1
	var aO1 ModelIdentifier
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.ModelIdentifier = aO1

	// AO2
	var dataAO2 struct {
		MaxPrice *float64 `json:"max_price"`

		MinPrice *float64 `json:"min_price"`

		RouteID *float64 `json:"route_id"`

		TruckID *float64 `json:"truck_id"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.MaxPrice = dataAO2.MaxPrice

	m.MinPrice = dataAO2.MinPrice

	m.RouteID = dataAO2.RouteID

	m.TruckID = dataAO2.TruckID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DataMultiplier) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.ModelTrackTime)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.ModelIdentifier)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		MaxPrice *float64 `json:"max_price"`

		MinPrice *float64 `json:"min_price"`

		RouteID *float64 `json:"route_id"`

		TruckID *float64 `json:"truck_id"`
	}

	dataAO2.MaxPrice = m.MaxPrice

	dataAO2.MinPrice = m.MinPrice

	dataAO2.RouteID = m.RouteID

	dataAO2.TruckID = m.TruckID

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data multiplier
func (m *DataMultiplier) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ModelTrackTime
	if err := m.ModelTrackTime.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ModelIdentifier
	if err := m.ModelIdentifier.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTruckID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataMultiplier) validateMaxPrice(formats strfmt.Registry) error {

	if err := validate.Required("max_price", "body", m.MaxPrice); err != nil {
		return err
	}

	return nil
}

func (m *DataMultiplier) validateMinPrice(formats strfmt.Registry) error {

	if err := validate.Required("min_price", "body", m.MinPrice); err != nil {
		return err
	}

	return nil
}

func (m *DataMultiplier) validateRouteID(formats strfmt.Registry) error {

	if err := validate.Required("route_id", "body", m.RouteID); err != nil {
		return err
	}

	return nil
}

func (m *DataMultiplier) validateTruckID(formats strfmt.Registry) error {

	if err := validate.Required("truck_id", "body", m.TruckID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this data multiplier based on the context it is used
func (m *DataMultiplier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ModelTrackTime
	if err := m.ModelTrackTime.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ModelIdentifier
	if err := m.ModelIdentifier.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DataMultiplier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataMultiplier) UnmarshalBinary(b []byte) error {
	var res DataMultiplier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
