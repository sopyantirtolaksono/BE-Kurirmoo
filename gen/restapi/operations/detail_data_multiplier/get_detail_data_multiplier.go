// Code generated by go-swagger; DO NOT EDIT.

package detail_data_multiplier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetDetailDataMultiplierHandlerFunc turns a function with the right signature into a get detail data multiplier handler
type GetDetailDataMultiplierHandlerFunc func(GetDetailDataMultiplierParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDetailDataMultiplierHandlerFunc) Handle(params GetDetailDataMultiplierParams) middleware.Responder {
	return fn(params)
}

// GetDetailDataMultiplierHandler interface for that can handle valid get detail data multiplier params
type GetDetailDataMultiplierHandler interface {
	Handle(GetDetailDataMultiplierParams) middleware.Responder
}

// NewGetDetailDataMultiplier creates a new http.Handler for the get detail data multiplier operation
func NewGetDetailDataMultiplier(ctx *middleware.Context, handler GetDetailDataMultiplierHandler) *GetDetailDataMultiplier {
	return &GetDetailDataMultiplier{Context: ctx, Handler: handler}
}

/*
	GetDetailDataMultiplier swagger:route GET /api/v1/data_multipliers/{id} detailDataMultiplier getDetailDataMultiplier

get detail data multiplier

Return detail data multiplier
*/
type GetDetailDataMultiplier struct {
	Context *middleware.Context
	Handler GetDetailDataMultiplierHandler
}

func (o *GetDetailDataMultiplier) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetDetailDataMultiplierParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetDetailDataMultiplierOKBody get detail data multiplier o k body
//
// swagger:model GetDetailDataMultiplierOKBody
type GetDetailDataMultiplierOKBody struct {

	// brand
	Brand string `json:"brand,omitempty"`

	// capacity
	Capacity int64 `json:"capacity,omitempty"`

	// city passed
	CityPassed int64 `json:"city_passed,omitempty"`

	// distance
	Distance int64 `json:"distance,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// lane
	Lane string `json:"lane,omitempty"`

	// max price
	MaxPrice int64 `json:"max_price,omitempty"`

	// min price
	MinPrice int64 `json:"min_price,omitempty"`

	// price per km
	PricePerKm int64 `json:"price_per_km,omitempty"`

	// route
	Route string `json:"route,omitempty"`

	// truck kind
	TruckKind string `json:"truck_kind,omitempty"`

	// truck type
	TruckType string `json:"truck_type,omitempty"`

	// volume
	Volume int64 `json:"volume,omitempty"`
}

// Validate validates this get detail data multiplier o k body
func (o *GetDetailDataMultiplierOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get detail data multiplier o k body based on context it is used
func (o *GetDetailDataMultiplierOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDetailDataMultiplierOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDetailDataMultiplierOKBody) UnmarshalBinary(b []byte) error {
	var res GetDetailDataMultiplierOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
