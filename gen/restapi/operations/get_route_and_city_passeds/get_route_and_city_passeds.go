// Code generated by go-swagger; DO NOT EDIT.

package get_route_and_city_passeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetRouteAndCityPassedsHandlerFunc turns a function with the right signature into a get route and city passeds handler
type GetRouteAndCityPassedsHandlerFunc func(GetRouteAndCityPassedsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRouteAndCityPassedsHandlerFunc) Handle(params GetRouteAndCityPassedsParams) middleware.Responder {
	return fn(params)
}

// GetRouteAndCityPassedsHandler interface for that can handle valid get route and city passeds params
type GetRouteAndCityPassedsHandler interface {
	Handle(GetRouteAndCityPassedsParams) middleware.Responder
}

// NewGetRouteAndCityPasseds creates a new http.Handler for the get route and city passeds operation
func NewGetRouteAndCityPasseds(ctx *middleware.Context, handler GetRouteAndCityPassedsHandler) *GetRouteAndCityPasseds {
	return &GetRouteAndCityPasseds{Context: ctx, Handler: handler}
}

/*
	GetRouteAndCityPasseds swagger:route GET /api/v1/routes/{id} getRouteAndCityPasseds getRouteAndCityPasseds

get route and city passeds

Return route and city passeds
*/
type GetRouteAndCityPasseds struct {
	Context *middleware.Context
	Handler GetRouteAndCityPassedsHandler
}

func (o *GetRouteAndCityPasseds) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetRouteAndCityPassedsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetRouteAndCityPassedsOKBody get route and city passeds o k body
//
// swagger:model GetRouteAndCityPassedsOKBody
type GetRouteAndCityPassedsOKBody struct {

	// city passeds
	CityPasseds []string `json:"city_passeds"`

	// destination city
	DestinationCity string `json:"destination_city,omitempty"`

	// origin city
	OriginCity string `json:"origin_city,omitempty"`
}

// Validate validates this get route and city passeds o k body
func (o *GetRouteAndCityPassedsOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get route and city passeds o k body based on context it is used
func (o *GetRouteAndCityPassedsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetRouteAndCityPassedsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRouteAndCityPassedsOKBody) UnmarshalBinary(b []byte) error {
	var res GetRouteAndCityPassedsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
