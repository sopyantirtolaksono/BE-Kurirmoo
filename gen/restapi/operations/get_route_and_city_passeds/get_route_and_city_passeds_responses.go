// Code generated by go-swagger; DO NOT EDIT.

package get_route_and_city_passeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"kurirmoo/gen/models"
)

// GetRouteAndCityPassedsOKCode is the HTTP code returned for type GetRouteAndCityPassedsOK
const GetRouteAndCityPassedsOKCode int = 200

/*
GetRouteAndCityPassedsOK OK

swagger:response getRouteAndCityPassedsOK
*/
type GetRouteAndCityPassedsOK struct {

	/*
	  In: Body
	*/
	Payload *GetRouteAndCityPassedsOKBody `json:"body,omitempty"`
}

// NewGetRouteAndCityPassedsOK creates GetRouteAndCityPassedsOK with default headers values
func NewGetRouteAndCityPassedsOK() *GetRouteAndCityPassedsOK {

	return &GetRouteAndCityPassedsOK{}
}

// WithPayload adds the payload to the get route and city passeds o k response
func (o *GetRouteAndCityPassedsOK) WithPayload(payload *GetRouteAndCityPassedsOKBody) *GetRouteAndCityPassedsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get route and city passeds o k response
func (o *GetRouteAndCityPassedsOK) SetPayload(payload *GetRouteAndCityPassedsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRouteAndCityPassedsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRouteAndCityPassedsBadRequestCode is the HTTP code returned for type GetRouteAndCityPassedsBadRequest
const GetRouteAndCityPassedsBadRequestCode int = 400

/*
GetRouteAndCityPassedsBadRequest Bad Request

swagger:response getRouteAndCityPassedsBadRequest
*/
type GetRouteAndCityPassedsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRouteAndCityPassedsBadRequest creates GetRouteAndCityPassedsBadRequest with default headers values
func NewGetRouteAndCityPassedsBadRequest() *GetRouteAndCityPassedsBadRequest {

	return &GetRouteAndCityPassedsBadRequest{}
}

// WithPayload adds the payload to the get route and city passeds bad request response
func (o *GetRouteAndCityPassedsBadRequest) WithPayload(payload *models.Error) *GetRouteAndCityPassedsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get route and city passeds bad request response
func (o *GetRouteAndCityPassedsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRouteAndCityPassedsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRouteAndCityPassedsNotFoundCode is the HTTP code returned for type GetRouteAndCityPassedsNotFound
const GetRouteAndCityPassedsNotFoundCode int = 404

/*
GetRouteAndCityPassedsNotFound The specified resource was not found

swagger:response getRouteAndCityPassedsNotFound
*/
type GetRouteAndCityPassedsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRouteAndCityPassedsNotFound creates GetRouteAndCityPassedsNotFound with default headers values
func NewGetRouteAndCityPassedsNotFound() *GetRouteAndCityPassedsNotFound {

	return &GetRouteAndCityPassedsNotFound{}
}

// WithPayload adds the payload to the get route and city passeds not found response
func (o *GetRouteAndCityPassedsNotFound) WithPayload(payload *models.Error) *GetRouteAndCityPassedsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get route and city passeds not found response
func (o *GetRouteAndCityPassedsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRouteAndCityPassedsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRouteAndCityPassedsInternalServerErrorCode is the HTTP code returned for type GetRouteAndCityPassedsInternalServerError
const GetRouteAndCityPassedsInternalServerErrorCode int = 500

/*
GetRouteAndCityPassedsInternalServerError Internal server error

swagger:response getRouteAndCityPassedsInternalServerError
*/
type GetRouteAndCityPassedsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRouteAndCityPassedsInternalServerError creates GetRouteAndCityPassedsInternalServerError with default headers values
func NewGetRouteAndCityPassedsInternalServerError() *GetRouteAndCityPassedsInternalServerError {

	return &GetRouteAndCityPassedsInternalServerError{}
}

// WithPayload adds the payload to the get route and city passeds internal server error response
func (o *GetRouteAndCityPassedsInternalServerError) WithPayload(payload *models.Error) *GetRouteAndCityPassedsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get route and city passeds internal server error response
func (o *GetRouteAndCityPassedsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRouteAndCityPassedsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
GetRouteAndCityPassedsDefault error

swagger:response getRouteAndCityPassedsDefault
*/
type GetRouteAndCityPassedsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRouteAndCityPassedsDefault creates GetRouteAndCityPassedsDefault with default headers values
func NewGetRouteAndCityPassedsDefault(code int) *GetRouteAndCityPassedsDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRouteAndCityPassedsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get route and city passeds default response
func (o *GetRouteAndCityPassedsDefault) WithStatusCode(code int) *GetRouteAndCityPassedsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get route and city passeds default response
func (o *GetRouteAndCityPassedsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get route and city passeds default response
func (o *GetRouteAndCityPassedsDefault) WithPayload(payload *models.Error) *GetRouteAndCityPassedsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get route and city passeds default response
func (o *GetRouteAndCityPassedsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRouteAndCityPassedsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
