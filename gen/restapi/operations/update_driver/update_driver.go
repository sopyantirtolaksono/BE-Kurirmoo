// Code generated by go-swagger; DO NOT EDIT.

package update_driver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"kurirmoo/gen/models"
)

// UpdateDriverHandlerFunc turns a function with the right signature into a update driver handler
type UpdateDriverHandlerFunc func(UpdateDriverParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateDriverHandlerFunc) Handle(params UpdateDriverParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// UpdateDriverHandler interface for that can handle valid update driver params
type UpdateDriverHandler interface {
	Handle(UpdateDriverParams, *models.Principal) middleware.Responder
}

// NewUpdateDriver creates a new http.Handler for the update driver operation
func NewUpdateDriver(ctx *middleware.Context, handler UpdateDriverHandler) *UpdateDriver {
	return &UpdateDriver{Context: ctx, Handler: handler}
}

/*
	UpdateDriver swagger:route PATCH /api/v1/drivers/{id} updateDriver updateDriver

update profile driver

Update profile driver (phone number)
*/
type UpdateDriver struct {
	Context *middleware.Context
	Handler UpdateDriverHandler
}

func (o *UpdateDriver) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateDriverParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateDriverBody update driver body
//
// swagger:model UpdateDriverBody
type UpdateDriverBody struct {

	// phone number
	// Required: true
	PhoneNumber *string `json:"phone_number"`

	// phone number 2
	PhoneNumber2 string `json:"phone_number_2,omitempty"`
}

// Validate validates this update driver body
func (o *UpdateDriverBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDriverBody) validatePhoneNumber(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"phone_number", "body", o.PhoneNumber); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update driver body based on context it is used
func (o *UpdateDriverBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDriverBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDriverBody) UnmarshalBinary(b []byte) error {
	var res UpdateDriverBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
