// Code generated by go-swagger; DO NOT EDIT.

package update_trip_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"kurirmoo/gen/models"
)

// UpdateTripStatusOKCode is the HTTP code returned for type UpdateTripStatusOK
const UpdateTripStatusOKCode int = 200

/*
UpdateTripStatusOK OK

swagger:response updateTripStatusOK
*/
type UpdateTripStatusOK struct {

	/*
	  In: Body
	*/
	Payload *models.Success `json:"body,omitempty"`
}

// NewUpdateTripStatusOK creates UpdateTripStatusOK with default headers values
func NewUpdateTripStatusOK() *UpdateTripStatusOK {

	return &UpdateTripStatusOK{}
}

// WithPayload adds the payload to the update trip status o k response
func (o *UpdateTripStatusOK) WithPayload(payload *models.Success) *UpdateTripStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update trip status o k response
func (o *UpdateTripStatusOK) SetPayload(payload *models.Success) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTripStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTripStatusBadRequestCode is the HTTP code returned for type UpdateTripStatusBadRequest
const UpdateTripStatusBadRequestCode int = 400

/*
UpdateTripStatusBadRequest Bad Request

swagger:response updateTripStatusBadRequest
*/
type UpdateTripStatusBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateTripStatusBadRequest creates UpdateTripStatusBadRequest with default headers values
func NewUpdateTripStatusBadRequest() *UpdateTripStatusBadRequest {

	return &UpdateTripStatusBadRequest{}
}

// WithPayload adds the payload to the update trip status bad request response
func (o *UpdateTripStatusBadRequest) WithPayload(payload *models.Error) *UpdateTripStatusBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update trip status bad request response
func (o *UpdateTripStatusBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTripStatusBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTripStatusUnauthorizedCode is the HTTP code returned for type UpdateTripStatusUnauthorized
const UpdateTripStatusUnauthorizedCode int = 401

/*
UpdateTripStatusUnauthorized The specified resource was not found

swagger:response updateTripStatusUnauthorized
*/
type UpdateTripStatusUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateTripStatusUnauthorized creates UpdateTripStatusUnauthorized with default headers values
func NewUpdateTripStatusUnauthorized() *UpdateTripStatusUnauthorized {

	return &UpdateTripStatusUnauthorized{}
}

// WithPayload adds the payload to the update trip status unauthorized response
func (o *UpdateTripStatusUnauthorized) WithPayload(payload *models.Error) *UpdateTripStatusUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update trip status unauthorized response
func (o *UpdateTripStatusUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTripStatusUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTripStatusNotFoundCode is the HTTP code returned for type UpdateTripStatusNotFound
const UpdateTripStatusNotFoundCode int = 404

/*
UpdateTripStatusNotFound The specified resource was not found

swagger:response updateTripStatusNotFound
*/
type UpdateTripStatusNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateTripStatusNotFound creates UpdateTripStatusNotFound with default headers values
func NewUpdateTripStatusNotFound() *UpdateTripStatusNotFound {

	return &UpdateTripStatusNotFound{}
}

// WithPayload adds the payload to the update trip status not found response
func (o *UpdateTripStatusNotFound) WithPayload(payload *models.Error) *UpdateTripStatusNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update trip status not found response
func (o *UpdateTripStatusNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTripStatusNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTripStatusInternalServerErrorCode is the HTTP code returned for type UpdateTripStatusInternalServerError
const UpdateTripStatusInternalServerErrorCode int = 500

/*
UpdateTripStatusInternalServerError Internal server error

swagger:response updateTripStatusInternalServerError
*/
type UpdateTripStatusInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateTripStatusInternalServerError creates UpdateTripStatusInternalServerError with default headers values
func NewUpdateTripStatusInternalServerError() *UpdateTripStatusInternalServerError {

	return &UpdateTripStatusInternalServerError{}
}

// WithPayload adds the payload to the update trip status internal server error response
func (o *UpdateTripStatusInternalServerError) WithPayload(payload *models.Error) *UpdateTripStatusInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update trip status internal server error response
func (o *UpdateTripStatusInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTripStatusInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
UpdateTripStatusDefault Error

swagger:response updateTripStatusDefault
*/
type UpdateTripStatusDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateTripStatusDefault creates UpdateTripStatusDefault with default headers values
func NewUpdateTripStatusDefault(code int) *UpdateTripStatusDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateTripStatusDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update trip status default response
func (o *UpdateTripStatusDefault) WithStatusCode(code int) *UpdateTripStatusDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update trip status default response
func (o *UpdateTripStatusDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update trip status default response
func (o *UpdateTripStatusDefault) WithPayload(payload *models.Error) *UpdateTripStatusDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update trip status default response
func (o *UpdateTripStatusDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTripStatusDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
