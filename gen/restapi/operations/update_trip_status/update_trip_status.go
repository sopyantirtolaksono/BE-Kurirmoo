// Code generated by go-swagger; DO NOT EDIT.

package update_trip_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateTripStatusHandlerFunc turns a function with the right signature into a update trip status handler
type UpdateTripStatusHandlerFunc func(UpdateTripStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateTripStatusHandlerFunc) Handle(params UpdateTripStatusParams) middleware.Responder {
	return fn(params)
}

// UpdateTripStatusHandler interface for that can handle valid update trip status params
type UpdateTripStatusHandler interface {
	Handle(UpdateTripStatusParams) middleware.Responder
}

// NewUpdateTripStatus creates a new http.Handler for the update trip status operation
func NewUpdateTripStatus(ctx *middleware.Context, handler UpdateTripStatusHandler) *UpdateTripStatus {
	return &UpdateTripStatus{Context: ctx, Handler: handler}
}

/*
	UpdateTripStatus swagger:route PUT /api/v1/drivers/{id} updateTripStatus updateTripStatus

update trip status

Update trip status for driver mobile
*/
type UpdateTripStatus struct {
	Context *middleware.Context
	Handler UpdateTripStatusHandler
}

func (o *UpdateTripStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateTripStatusParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
