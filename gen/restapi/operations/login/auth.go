// Code generated by go-swagger; DO NOT EDIT.

package login

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthHandlerFunc turns a function with the right signature into a auth handler
type AuthHandlerFunc func(AuthParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AuthHandlerFunc) Handle(params AuthParams) middleware.Responder {
	return fn(params)
}

// AuthHandler interface for that can handle valid auth params
type AuthHandler interface {
	Handle(AuthParams) middleware.Responder
}

// NewAuth creates a new http.Handler for the auth operation
func NewAuth(ctx *middleware.Context, handler AuthHandler) *Auth {
	return &Auth{Context: ctx, Handler: handler}
}

/*
	Auth swagger:route POST /api/v1/login login auth

login

Login User
*/
type Auth struct {
	Context *middleware.Context
	Handler AuthHandler
}

func (o *Auth) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAuthParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AuthBody auth body
//
// swagger:model AuthBody
type AuthBody struct {

	// email
	// Required: true
	Email *string `json:"email"`

	// password
	// Required: true
	Password *string `json:"password"`
}

// Validate validates this auth body
func (o *AuthBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AuthBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

func (o *AuthBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this auth body based on context it is used
func (o *AuthBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthBody) UnmarshalBinary(b []byte) error {
	var res AuthBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AuthOKBody auth o k body
//
// swagger:model AuthOKBody
type AuthOKBody struct {

	// expired at
	ExpiredAt string `json:"expired_at,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this auth o k body
func (o *AuthOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth o k body based on context it is used
func (o *AuthOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthOKBody) UnmarshalBinary(b []byte) error {
	var res AuthOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
