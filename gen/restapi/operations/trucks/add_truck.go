// Code generated by go-swagger; DO NOT EDIT.

package trucks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddTruckHandlerFunc turns a function with the right signature into a add truck handler
type AddTruckHandlerFunc func(AddTruckParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddTruckHandlerFunc) Handle(params AddTruckParams) middleware.Responder {
	return fn(params)
}

// AddTruckHandler interface for that can handle valid add truck params
type AddTruckHandler interface {
	Handle(AddTruckParams) middleware.Responder
}

// NewAddTruck creates a new http.Handler for the add truck operation
func NewAddTruck(ctx *middleware.Context, handler AddTruckHandler) *AddTruck {
	return &AddTruck{Context: ctx, Handler: handler}
}

/*
	AddTruck swagger:route POST /api/v1/trucks trucks addTruck

add truck

Add new truck
*/
type AddTruck struct {
	Context *middleware.Context
	Handler AddTruckHandler
}

func (o *AddTruck) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddTruckParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddTruckBody add truck body
//
// swagger:model AddTruckBody
type AddTruckBody struct {

	// brand
	// Required: true
	Brand *string `json:"brand"`

	// capacity
	// Required: true
	Capacity *int64 `json:"capacity"`

	// height
	// Required: true
	Height *int64 `json:"height"`

	// length
	// Required: true
	Length *int64 `json:"length"`

	// truck kind
	// Required: true
	TruckKind *string `json:"truck_kind"`

	// truck type
	// Required: true
	TruckType *string `json:"truck_type"`

	// width
	// Required: true
	Width *int64 `json:"width"`
}

// Validate validates this add truck body
func (o *AddTruckBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBrand(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTruckKind(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTruckType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWidth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddTruckBody) validateBrand(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"brand", "body", o.Brand); err != nil {
		return err
	}

	return nil
}

func (o *AddTruckBody) validateCapacity(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"capacity", "body", o.Capacity); err != nil {
		return err
	}

	return nil
}

func (o *AddTruckBody) validateHeight(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"height", "body", o.Height); err != nil {
		return err
	}

	return nil
}

func (o *AddTruckBody) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"length", "body", o.Length); err != nil {
		return err
	}

	return nil
}

func (o *AddTruckBody) validateTruckKind(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"truck_kind", "body", o.TruckKind); err != nil {
		return err
	}

	return nil
}

func (o *AddTruckBody) validateTruckType(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"truck_type", "body", o.TruckType); err != nil {
		return err
	}

	return nil
}

func (o *AddTruckBody) validateWidth(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"width", "body", o.Width); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add truck body based on context it is used
func (o *AddTruckBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddTruckBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddTruckBody) UnmarshalBinary(b []byte) error {
	var res AddTruckBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
