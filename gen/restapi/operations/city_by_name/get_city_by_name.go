// Code generated by go-swagger; DO NOT EDIT.

package city_by_name

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetCityByNameHandlerFunc turns a function with the right signature into a get city by name handler
type GetCityByNameHandlerFunc func(GetCityByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCityByNameHandlerFunc) Handle(params GetCityByNameParams) middleware.Responder {
	return fn(params)
}

// GetCityByNameHandler interface for that can handle valid get city by name params
type GetCityByNameHandler interface {
	Handle(GetCityByNameParams) middleware.Responder
}

// NewGetCityByName creates a new http.Handler for the get city by name operation
func NewGetCityByName(ctx *middleware.Context, handler GetCityByNameHandler) *GetCityByName {
	return &GetCityByName{Context: ctx, Handler: handler}
}

/*
	GetCityByName swagger:route GET /api/v1/cities/{city_name} cityByName getCityByName

get a city by name

Return city by name
*/
type GetCityByName struct {
	Context *middleware.Context
	Handler GetCityByNameHandler
}

func (o *GetCityByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetCityByNameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetCityByNameOKBody get city by name o k body
//
// swagger:model GetCityByNameOKBody
type GetCityByNameOKBody struct {

	// acronim
	Acronim string `json:"acronim,omitempty"`

	// city code
	CityCode string `json:"city_code,omitempty"`

	// city name
	CityName string `json:"city_name,omitempty"`
}

// Validate validates this get city by name o k body
func (o *GetCityByNameOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get city by name o k body based on context it is used
func (o *GetCityByNameOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCityByNameOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCityByNameOKBody) UnmarshalBinary(b []byte) error {
	var res GetCityByNameOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
