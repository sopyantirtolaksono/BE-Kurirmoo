// Code generated by go-swagger; DO NOT EDIT.

package add_city

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddCityHandlerFunc turns a function with the right signature into a add city handler
type AddCityHandlerFunc func(AddCityParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddCityHandlerFunc) Handle(params AddCityParams) middleware.Responder {
	return fn(params)
}

// AddCityHandler interface for that can handle valid add city params
type AddCityHandler interface {
	Handle(AddCityParams) middleware.Responder
}

// NewAddCity creates a new http.Handler for the add city operation
func NewAddCity(ctx *middleware.Context, handler AddCityHandler) *AddCity {
	return &AddCity{Context: ctx, Handler: handler}
}

/*
	AddCity swagger:route POST /api/v1/cities addCity addCity

# Add a City

Add a City with Acronim
*/
type AddCity struct {
	Context *middleware.Context
	Handler AddCityHandler
}

func (o *AddCity) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddCityParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddCityBody add city body
//
// swagger:model AddCityBody
type AddCityBody struct {

	// code
	// Required: true
	Code *string `json:"code"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this add city body
func (o *AddCityBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddCityBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *AddCityBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add city body based on context it is used
func (o *AddCityBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddCityBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddCityBody) UnmarshalBinary(b []byte) error {
	var res AddCityBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddCityCreatedBody add city created body
//
// swagger:model AddCityCreatedBody
type AddCityCreatedBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add city created body
func (o *AddCityCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add city created body based on context it is used
func (o *AddCityCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddCityCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddCityCreatedBody) UnmarshalBinary(b []byte) error {
	var res AddCityCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
