// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"kurirmoo/gen/models"
)

// GetAllCustomerOKCode is the HTTP code returned for type GetAllCustomerOK
const GetAllCustomerOKCode int = 200

/*
GetAllCustomerOK a json array of customers

swagger:response getAllCustomerOK
*/
type GetAllCustomerOK struct {

	/*
	  In: Body
	*/
	Payload []*GetAllCustomerOKBodyItems0 `json:"body,omitempty"`
}

// NewGetAllCustomerOK creates GetAllCustomerOK with default headers values
func NewGetAllCustomerOK() *GetAllCustomerOK {

	return &GetAllCustomerOK{}
}

// WithPayload adds the payload to the get all customer o k response
func (o *GetAllCustomerOK) WithPayload(payload []*GetAllCustomerOKBodyItems0) *GetAllCustomerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all customer o k response
func (o *GetAllCustomerOK) SetPayload(payload []*GetAllCustomerOKBodyItems0) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllCustomerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*GetAllCustomerOKBodyItems0, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetAllCustomerBadRequestCode is the HTTP code returned for type GetAllCustomerBadRequest
const GetAllCustomerBadRequestCode int = 400

/*
GetAllCustomerBadRequest Bad Request

swagger:response getAllCustomerBadRequest
*/
type GetAllCustomerBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAllCustomerBadRequest creates GetAllCustomerBadRequest with default headers values
func NewGetAllCustomerBadRequest() *GetAllCustomerBadRequest {

	return &GetAllCustomerBadRequest{}
}

// WithPayload adds the payload to the get all customer bad request response
func (o *GetAllCustomerBadRequest) WithPayload(payload *models.Error) *GetAllCustomerBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all customer bad request response
func (o *GetAllCustomerBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllCustomerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
GetAllCustomerDefault error

swagger:response getAllCustomerDefault
*/
type GetAllCustomerDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAllCustomerDefault creates GetAllCustomerDefault with default headers values
func NewGetAllCustomerDefault(code int) *GetAllCustomerDefault {
	if code <= 0 {
		code = 500
	}

	return &GetAllCustomerDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get all customer default response
func (o *GetAllCustomerDefault) WithStatusCode(code int) *GetAllCustomerDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get all customer default response
func (o *GetAllCustomerDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get all customer default response
func (o *GetAllCustomerDefault) WithPayload(payload *models.Error) *GetAllCustomerDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all customer default response
func (o *GetAllCustomerDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllCustomerDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
